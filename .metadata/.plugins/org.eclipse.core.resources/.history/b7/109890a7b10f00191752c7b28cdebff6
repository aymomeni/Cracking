package chapter4;

import java.util.ArrayList;
import java.util.LinkedList;

public class ListOfDepths {

	// BFS approach
	public ArrayList<LinkedList<BiTreeNode>> getListOfDepths(BiTreeNode root){
		
		// check if root is null
		if(root == null){
			return null;
		}
		
		ArrayList<LinkedList<BiTreeNode>> returnList = new ArrayList<LinkedList<BiTreeNode>>();
		LinkedList<BiTreeNode> queue = new LinkedList<BiTreeNode>();
		root.marked = true;
		
		// if root doesn't have descendants
		if(root.leftChild == null && root.rightChild == null){
			LinkedList<BiTreeNode> tempList = new LinkedList<BiTreeNode>();
			tempList.add(root);
			returnList.add(tempList);		
			return returnList;			
		}
		
		queue.add(root);

		while(!queue.isEmpty()){
			
			returnList.addLast(queue);
			LinkedList<BiTreeNode> parents = new LinkedList<BiTreeNode>();
			
			for(BiTreeNode parent: parents){
				
				if(parent.leftChild != null){
					queue.addLast(parent.leftChild);
				}
					
				if(parent.rightChild != null){
					queue.addLast(parent.rightChild);
				} 
			}

		}		
		
		return returnList;
	}
}
